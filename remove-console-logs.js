#!/usr/bin/env node

// ÿ£ÿØÿßÿ© ŸÑÿ•ÿ≤ÿßŸÑÿ© console.log ŸÖŸÜ ŸÖŸÑŸÅÿßÿ™ JavaScript ŸÑŸÑÿ•ŸÜÿ™ÿßÿ¨

const fs = require('fs');
const path = require('path');

const jsFiles = ['popup.js', 'background.js', 'content.js'];

function removeConsoleLogs(filePath) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        
        // ÿ•ÿ≤ÿßŸÑÿ© console.log Ÿà console.info Ÿà console.debug (ÿ•ÿ®ŸÇÿßÿ° console.warn Ÿà console.error)
        content = content.replace(/console\.(log|info|debug)\([^)]*\);\s*/g, '');
        
        // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ≥ÿ∑Ÿàÿ± ÿßŸÑŸÅÿßÿ±ÿ∫ÿ© ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©
        content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
        
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Cleaned console logs from: ${filePath}`);
        
        return true;
    } catch (error) {
        console.error(`‚ùå Error processing ${filePath}:`, error.message);
        return false;
    }
}

function restoreFromBackup(filePath) {
    const backupPath = `${filePath}.backup`;
    if (fs.existsSync(backupPath)) {
        fs.copyFileSync(backupPath, filePath);
        console.log(`üîÑ Restored from backup: ${filePath}`);
    }
}

function createBackup(filePath) {
    const backupPath = `${filePath}.backup`;
    if (!fs.existsSync(backupPath)) {
        fs.copyFileSync(filePath, backupPath);
        console.log(`üíæ Created backup: ${backupPath}`);
    }
}

// Main function
function main() {
    const action = process.argv[2];
    
    if (action === 'remove') {
        console.log('üîß Removing console logs for production...');
        
        jsFiles.forEach(file => {
            if (fs.existsSync(file)) {
                createBackup(file);
                removeConsoleLogs(file);
            } else {
                console.warn(`‚ö†Ô∏è File not found: ${file}`);
            }
        });
        
        console.log('‚úÖ Production build ready! Console logs removed.');
        console.log('üí° Use "node remove-console-logs.js restore" to restore original files.');
        
    } else if (action === 'restore') {
        console.log('üîÑ Restoring original files...');
        
        jsFiles.forEach(file => {
            restoreFromBackup(file);
        });
        
        console.log('‚úÖ Original files restored!');
        
    } else {
        console.log('üìù Usage:');
        console.log('  node remove-console-logs.js remove   - Remove console logs for production');
        console.log('  node remove-console-logs.js restore  - Restore original files');
    }
}

if (require.main === module) {
    main();
}

module.exports = { removeConsoleLogs, createBackup, restoreFromBackup }; 